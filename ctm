#!/usr/bin/env python3

import argparse
import os
import subprocess
import shutil
import yaml
import json
import sys
import requests
import time
import keyring
from typing import List
from pprint import pprint


CLIENT_ID = 'VWBl5YHU4-xRq5Q-A4jqa8tHYD5XvOl2sH_ZEFxj8xU'
OAUTH2_DEVICE_CODE_URL = 'https://app.calltrackingmetrics.com/oauth2/device_token'
OAUTH2_ACCESS_TOKEN_URL = 'https://app.calltrackingmetrics.com/oauth2/token'
KEYRING_SERVICE_PREFIX = 'ctm.'

POST_PUSH_SCRIPT = """#!/bin/bash
ctm deploy
"""

PRE_COMMIT_SCRIPT = """#!/bin/bash
ctm verify
"""

BASE_CONFIG = """# CTM Lambda Configuration File
base_object: &base_object
  name: Your Lambda Function
  description: Description of what your Lambda function does
  code: load_file_code_js
  runtime: nodejs
  exec_type: trigger
  mode:
  variables:
    - name: API_KEY
      value: An API key if you need it
    - name: Another Key
      value: variable value
  packages:
    - layer_arn: 'arn:aws:lambda:us-east-1:580674011299:layer:jsforce-1_10_1:1'
  credentials:
    - provider: 'salesforce'

development:
  host: "app.calltrackingmetrics.com"
  object:
    <<: *base_object
    id: replace with your object id LDA...

staging:
  host: "app.calltrackingmetrics.com"
  object:
    <<: *base_object
    id: replace with your object id LDA...

production:
  host: "app.calltrackingmetrics.com"
  object:
    <<: *base_object
    id: replace with your object id LDA...
"""

SAMPLE_CODE_FILE = """exports.handler = async (event, context) => {
  /*
  // event exposes the activity object
    const call = event.activity; // call, text, chat, form, video, fax, etc...

  // context includes an http interface
  // make a GET request
    const get_url = 'https://api.your-service.com/some-endpoint';
    const {request, response, data} = await context.http_get(get_url);
  // make a POST request
    const postData = JSON.stringify({key:'value'});
    const authHeaders = {Authentication: 'Bearer ...', 'Content-Type':'application/json'};
    const post_url = 'https://api.your-service.com/some-endpoint';
    const { request, response, data } = context.http_post(post_url, postData, authHeaders);
  //
  // event exposes
  // event.id       - a reference to this lambda function
  // event.activity - the call, text or form message that triggered this function, see event.activity.direction
  // event.options  - any additional user provided inputs
  //

  // you can also use some helper methods to easily score or update an activity
  // await context.ctm.score('reportTag', 5, 400, true, new Date(), {fieldA: 'Super'});

  // or you can update the contact record fields associated to the activity
  // await context.ctm.update({name: 'Hello World', email: 'leads@example.com', custom_fields: {fieldA: 'Super'}});

  // both the http interface and the ctm interface return a Promise allowing you to wait for the methods to complete or
  // detect errors if they fail

  // if you are not using async await then you must be sure to call context.done() to signal the completion of your script, if you are using a promise use this in the
  // promise completion to ensure the code isn't terminated before the promise returns or within the response to a callback function.
  */
}
"""

def main():
    parser = argparse.ArgumentParser(description="ctm command-line tool")
    subparsers = parser.add_subparsers(dest="command", required=True)

    verify_parser = subparsers.add_parser("verify", help="Validate your project configuration file and assoicated code file is valid")

    deploy_parser = subparsers.add_parser("deploy", help="Deploy your project to the CTM platform")
    deploy_parser.add_argument('-e', '--environment', help='Deployment environment', required=False)

    create_repo_parser = subparsers.add_parser("create:lambda", help="Create a new git repository for a new project")
    create_repo_parser.add_argument('-n', '--name', help='Project name', required=True)
    create_repo_parser.add_argument('-p', '--path', help='Project path', default='.')

    reset_repo_parser = subparsers.add_parser("reset:credentials", help="Reset the stored credentials for a given project")
    reset_repo_parser.add_argument('-n', '--name', help='Project name', default='.')

    args = parser.parse_args()

    if args.command == "verify":
        run_verify()
    elif args.command == "deploy":
        run_deploy(args.environment)
    elif args.command == "create:lambda":
        create_new_repo(args.name, args.path)
    elif args.command == "reset:credentials":
        reset_credentials(args.name)
    else:
        printf("Unknown command: {args.command}")

def reset_credentials(name):
    store_access_token(name, {})
  
def run_verify():
  # Define the path to the config file
  CONFIG_FILE = "config.yml"

  # Use yamllint to validate the YAML format
  yaml_lint_output = subprocess.run(['yamllint', CONFIG_FILE], capture_output=True, text=True)

  if yaml_lint_output.returncode != 0:
      print(f"Error: Invalid YAML format in {CONFIG_FILE}:")
      print(yaml_lint_output.stdout)
      sys.exit(1)

  # Use the Python YAML library to load the config file to ensure it doesn't crash
  try:
      with open(CONFIG_FILE, 'r') as config_file:
          config = yaml.safe_load(config_file)

      for env_key in ['development', 'staging', 'production']:
          cfg = config.get(env_key)
          if cfg is None:
              print(f"Error: Missing '{env_key}' key in {CONFIG_FILE}")
              sys.exit(1)

          for key in ['host', 'object']:
              if cfg.get(key) is None:
                  print(f"Error: Missing '{key}' key in {CONFIG_FILE} for {env_key}\n\n{cfg}")
                  sys.exit(1)

          obj = cfg['object']
          if 'code' in obj:
              if not os.path.exists('code.js'):
                  print("Error: Missing code.js file")
                  sys.exit(1)

              node_check = subprocess.run(["/usr/bin/env", "node", "-c", "code.js"])
              if node_check.returncode != 0:
                  print("Error: code.js is not valid JavaScript")
                  sys.exit(1)

  except Exception as e:
      print(f"Error: Failed to load {CONFIG_FILE}: {e}")
      sys.exit(1)

def refresh_access_token(refresh_token, client_id):
    data = {
        'grant_type': 'refresh_token',
        'client_id': client_id,
        'refresh_token': refresh_token
    }
    response = requests.post(OAUTH2_ACCESS_TOKEN_URL, data=data)
    return response.json()


def validate_acess(project_name: str):
    token_info = get_access_token(project_name)
    if token_info is None or 'expires_at' not in token_info or int(time.time()) > token_info['expires_at']:
        print(f"Access token not found or expired, performing a new OAuth2 device flow...")
        # Token is expired or not found
        if token_info and 'refresh_token' in token_info:
            print("Refreshing access token")
            token_info = refresh_access_token(token_info['refresh_token'], CLIENT_ID)
            if token_info and 'access_token' in token_info:
              store_access_token(project_name, token_info)
            else:
              print("Failed to refresh access token")
        else:
            # Perform a new access token flow
            print("Access token not found or expired, performing a new OAuth2 device flow...")
            token_info = perform_oauth2_device_flow(CLIENT_ID)
            store_access_token(project_name, token_info)

    if token_info is None or 'access_token' not in token_info:
      print("Failed to get access token.  Reset try again")
      store_access_token(project_name, {})
      return
    # Use the access token to perform your tasks
    return token_info
  

def run_deploy(env: str):
    BRANCHES = ['master', 'release-production', 'release-staging', 'release-development']
    deployment_targets = ['production', 'staging', 'development']

    project_name = read_project_name(os.getcwd())
    print(f"Project name: {project_name}")
    token_info = validate_acess(project_name)
    if token_info is None:
      return
    # Use the access token to perform your tasks
    access_token = token_info['access_token']
    refresh_token = token_info['refresh_token']
    account_id = token_info['account_id']
    expires_in = token_info['expires_in']
    print(f"access token: {access_token} for account {account_id} expires in {expires_in} seconds")

    if env is None:
        current_branch = subprocess.check_output(
            ['git', 'rev-parse', '--abbrev-ref', 'HEAD']).decode('utf-8').strip()

        if current_branch in BRANCHES:
            env = current_branch.split('-')[-1]
            print(f"Current branch is {current_branch}, deploying to {env}")
            if env is None or env not in deployment_targets:
              env = 'development'

    with open("config.yml", 'r') as config_file:
        config = yaml.safe_load(config_file)
        env_config = config[env]

    host = env_config['host']
    obj = env_config['object']
    if 'code' in obj:
        with open('code.js', 'r') as code_file:
            obj['code'] = code_file.read()

    print(f"deploying {json.dumps(obj, indent=2)}")

    wrap = {
        'lambda_action': obj
    }

#        command = f"curl -H 'Authorization: Bearer {access_token}' -XPATCH -H'Content-Type:application/json' 'https://{host}/api/v1/accounts/{account_id}/lambdas/{obj['id']}' -d'{json.dumps(wrap)}'"
#        os.system(command)
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    url = f"https://{host}/api/v1/accounts/{account_id}/lambdas/{obj['id']}"
    data = json.dumps(wrap)

    response = requests.patch(url, headers=headers, data=data)

    # You can check the response status code and content if needed
    print(response.status_code)
    print(response.content)

def create_new_repo(name: str, path: str):
    token_info = validate_acess(name)
    if token_info is None:
        token_info = perform_oauth2_device_flow(CLIENT_ID)
    if token_info is None:
        print("Failed to get access token. Before we can create your project we must get an access token.  Please try again.")
        return
    store_access_token(name, token_info)
    print("Creating new project...")

    host = 'app.calltrackingmetrics.com'
    access_token = token_info['access_token']

    # verify the account supports lambdas
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    url = f"https://{host}/api/v1/accounts/current"
    response = requests.get(url, headers=headers)

    # You can check the response status code and content if needed
    print(response.status_code)
    print(response.content)
    plan_name = json.loads(response.content)['plan']

    # now given the plan we need to check for lambda support
    url = f"https://{host}/api/v1/plans/features"
    response = requests.get(url, headers=headers)
    print(response.status_code)
    print(response.content)
    # find the flag == 'lambda' within {"features" : { "contact_center": [ { "plans": [ { "field_name": "plan_name", "enabled": true|false },... ] }, ... ] } }
    features = json.loads(response.content)['features']
    contact_center_features = features['contact_center']

    # First, filter out the plan features for 'lambda'
    lambda_features = [x for x in contact_center_features if x['flag'] == 'lambda']

    if not lambda_features:
        raise ValueError("No lambda plans found")

    # Now, filter out the specific plan with the desired plan_name
    specific_plan = [x for x in lambda_features[0]['plans'] if x['field_name'] == plan_name]

    if not specific_plan:
        raise ValueError("No specific plan found")

    # Check if the plan is enabled
    is_lambda_supported = specific_plan[0]['enabled']

    print(is_lambda_supported)
    if not is_lambda_supported:
        print(f"Your account plan {plan_name} does not support lambdas.  Please upgrade your account plan to enable lambda function support.")
        return

    project_path = os.path.join(path, name)
    create_project_folder(project_path)
    initialize_git(project_path)
    add_base_files(name, project_path)
    initialize_lambda(name, token_info)
    print(f"Project ready at {project_path}/{name}")


def perform_oauth2_device_flow(client_id: str) -> str:
    payload = {
        'client_id': client_id,
    }

    response = requests.post(OAUTH2_DEVICE_CODE_URL, data=payload)
    response.raise_for_status()
    device_info = response.json()

    print(f"\n\nPlease visit {device_info['verification_uri']} and enter the code {device_info['user_code']}\n\n")

    token_info = poll_for_access_token(client_id, device_info)
    token_info['device_code'] = device_info['device_code']
    return token_info

def poll_for_access_token(client_id: str, device_info: dict) -> str:
    symbols = ['-', '\\', '|', '/']
    interval = device_info['interval']

    payload = {
        'client_id': client_id,
        'device_code': device_info['device_code'],
        'grant_type': 'device_code',
    }

    while True:
        response = requests.post(OAUTH2_ACCESS_TOKEN_URL, data=payload)

        if response.status_code == 200:
            token_info = response.json()
            return token_info
        elif response.status_code == 400:
            error_info = response.json()
            if error_info['error'] == 'authorization_pending':
                print("Waiting for user authorization...")
                print(f"Please visit {device_info['verification_uri']} and enter the code {device_info['user_code']}")
            else:
                raise RuntimeError(f"Error while polling for access token: {error_info['error']}")
        else:
            response.raise_for_status()

        for symbol in symbols:
            sys.stdout.write(f'\rWaiting for user authorization... {symbol}')
            sys.stdout.flush()
            time.sleep(interval)

def store_access_token(name: str, value: dict):
    try:
        if 'expires_in' in value:
            value['expires_at'] = int(time.time()) + value['expires_in']
        token_info_str = json.dumps(value)
        keyring.set_password(KEYRING_SERVICE_PREFIX + name, 'token_info', token_info_str)
    except keyring_api.Error as e:
        print(f"An error occurred while fetching the access token: {e}")
        None

def get_access_token(name: str) -> str:
    try:
        prefix = KEYRING_SERVICE_PREFIX
        print(f"Read access token for {prefix}{name} in keychain")
        token_info_str = keyring.get_password(KEYRING_SERVICE_PREFIX + name, 'token_info')
        print(f"token_info_str: {token_info_str}")
        return json.loads(token_info_str) if token_info_str else None
    except keyring_api.Error as e:
        print(f"An error occurred while fetching the access token: {e}")
        None


def create_project_folder(project_path: str):
    if not os.path.exists(project_path):
        os.makedirs(project_path)
        print(f"Created project folder: {project_path}")
    else:
        print(f"Project folder already exists: {project_path}")


def initialize_git(project_path: str):
    subprocess.run(["git", "init"], cwd=project_path)
    print(f"Initialized Git repository in {project_path}")

def add_base_files(name: str, project_path: str):
    # Write a .ctmproject file with the name of our project
    proj_file = os.path.join(project_path, ".ctmproject")
    with open(proj_file, 'w') as f:
        f.write(name)
    subprocess.run(["git", "add", proj_file], cwd=project_path)

    # Write a config.yml file with the name of our project
    conf_file = os.path.join(project_path, "config.yml")
    with open(conf_file, 'w') as f:
        f.write(BASE_CONFIG)
    subprocess.run(["git", "add", conf_file], cwd=project_path)

    code_file = os.path.join(project_path, "code.js")
    with open(code_file, 'w') as f:
        f.write(SAMPLE_CODE_FILE)
    subprocess.run(["git", "add", code_file], cwd=project_path)


def update_id_in_yaml(file_path: str, new_id: str):
    with open(file_path, 'r') as f:
        config = yaml.safe_load(f)

    config['development']['object']['id'] = new_id

    with open(file_path, 'w') as f:
        yaml.safe_dump(config, f)

def initialize_lambda(name: str, token_info: dict):
    access_token = token_info['access_token']
    user_id      = token_info['user_id'] # run as this user
    account_id   = token_info['account_id'] # run as this user
    wrap = {
        'lambda_action': {
            'name': name,
            'runtime': 'nodejs',
            'mode': 'trigger',
            'code': SAMPLE_CODE_FILE
        }
    }

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }

    url = f"https://app.calltrackingmetrics.com/api/v1/accounts/{account_id}/lambdas/"
    data = json.dumps(wrap)

    response = requests.post(url, headers=headers, data=data)

    # You can check the response status code and content if needed
    print(response.status_code)
    print(response.content)
    update_id_in_yaml('config.yml', json.loads(response.content)['lambda_action']['id'])


def read_project_name(project_dir: str) -> str:
    project_file = os.path.join(project_dir, ".ctmproject")

    try:
        with open(project_file, "r") as f:
            project_name = f.readline().strip()
        return project_name
    except FileNotFoundError:
        print(f"Error: .ctmproject file not found in {project_dir}")
        sys.exit(1)
    except Exception as e:
        print(f"Error: Failed to read project name from .ctmproject file: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
